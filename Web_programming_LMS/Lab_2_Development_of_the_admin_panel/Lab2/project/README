
# Система управления студентами

## Описание проекта

Проект представляет собой простую систему управления студентами, которая позволяет пользователям получать информацию о студентах с использованием фильтров и пагинации. Система использует **FastAPI** для Backend и **React** для Frontend. Она развёрнута в виде контейнеров Docker.

---

## Структура проекта

```
project/
├── .gitignore
├── docker-compose.yml
├── package-lock.json
├── package.json
├── frontend/
│   ├── Dockerfile
│   ├── package.json
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── App.js
│   │   ├── FilterForm.js
│   │   ├── Pagination.js
│   │   ├── index.js
│   │   ├── services/
│   │   │   └── api.js
│   │   └── styles/
│   │       └── main.css
├── api/
│   ├── Dockerfile
│   ├── requirements.txt
│   ├── app/
│       ├── __init__.py
│       ├── crud.py
│       ├── database.py
│       ├── main.py
│       ├── models.py
│       └── schemas.py
```

---

## Используемые технологии

### Backend
- **FastAPI**: Framework для построения RESTful API.
- **SQLAlchemy**: ORM для работы с базой данных.
- **SQLite**: База данных по умолчанию.

### Frontend
- **React**: Библиотека для создания пользовательских интерфейсов.
- **CSS**: Для стилизации интерфейса.

### Контейнеризация
- **Docker**: Упаковка приложения в контейнеры.
- **Docker Compose**: Управление и запуск нескольких контейнеров одновременно.

---

## Установка и запуск системы

### Требования
- Установлены **Docker** и **Docker Compose**.

### Шаги установки

1. **Клонировать проект**
   ```bash
   git clone https://github.com/CHu292/SOC/tree/main/Web_programming_LMS/Lab_2_Development_of_the_admin_panel/Lab2/project
   cd project
   ```

2. **Запустить систему**
   ```bash
   docker-compose up --build
   ```

3. **Открыть пользовательский интерфейс**
   - Откройте браузер и перейдите по адресу: [http://localhost:3000](http://localhost:3000).

4. **Документация API**
   - Swagger UI: [http://localhost:8000/docs](http://localhost:8000/docs).
   - ReDoc: [http://localhost:8000/redoc](http://localhost:8000/redoc).

---

## Основные функции

### 1. API
- **Endpoint**: `/students/`
  - **Method**: `GET`
  - **Параметры**:
    - `skip` (по умолчанию: 0): Количество записей для пропуска.
    - `limit` (по умолчанию: 10): Количество возвращаемых записей.
    - `Фамилия`, `Имя`, `Отчество`, `Курс`, `Группа`, `Факультет`: Дополнительные фильтры.
  - **Пример ответа**:
    ```json
    [
      {
        "id": 1,
        "Фамилия": "Иванов",
        "Имя": "Иван",
        "Отчество": "Иванович",
        "Курс": "2",
        "Группа": "A1",
        "Факультет": "Информатика"
      }
    ]
    ```

### 2. Frontend
- Отображает список студентов с использованием фильтров и пагинации.
- Взаимодействует с Backend через API.

---

## Улучшения и расширения
1. **Добавление новых функций**:
   - Добавление/обновление/удаление информации о студентах.
   - Интеграция аутентификации (JWT).
2. **Оптимизация базы данных**:
   - Использование PostgreSQL в продуктивной среде.
3. **Безопасность**:
   - Ограничение доступа через роли.

---

## Автор

- **Автор проекта**: Чу Ван Доан
- **Группа**: N3347
- **Название проекта**: Система управления студентами.
- **Языки разработки**: Python, JavaScript.
- **Версия**: 1.0.
